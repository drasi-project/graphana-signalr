name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Run tests
        run: npm run test:ci

      - name: Build plugin
        run: npm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: buildAll

      - name: Warn missing Grafana API key
        run: |
          [ -z "${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}" ] && echo "⚠️ Grafana API key not set, skip signing" || echo "✅ Grafana API key is set"

      - name: Sign plugin
        run: npm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}
        env:
          GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq
          
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5
          
          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / { if (seen) exit; seen=1; next } seen { print }' CHANGELOG.md > release_notes.md
          echo "path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Check package version
        run: node -e "if (require('./package.json').version != require('./dist/plugin.json').info.version) {console.log('❌ Version mismatch'); process.exit(1)} else {console.log('✅ Versions match')}"

      - name: Package plugin
        id: package-plugin
        run: |
          cp -r dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "checksum=$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Validate plugin
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}
        run: |
          git clone https://github.com/grafana/plugin-validator
          npx --yes @grafana/plugin-validator@latest -sourceCodeUri file://. ${{ steps.metadata.outputs.archive }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build plugin
        run: npm run build

      - name: Start Grafana
        run: |
          docker-compose up -d
          sleep 30

      - name: Run e2e tests
        run: npm run e2e

      - name: Stop Grafana
        run: docker-compose down

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30